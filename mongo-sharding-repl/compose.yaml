name: mongo-sharding
version: '1'

services:
  configSrv:
    image: mongo:latest
    container_name: configSrv
    restart: always
    ports:
      - "27017:27017"
    networks:
      app-network:
        ipv4_address: 173.17.0.10
    volumes:
      - config-data:/data/db
    command: [
      "--configsvr",
      "--replSet", "config_server",
      "--bind_ip_all",
      "--port", "27017"
    ]
    healthcheck:
      test: [ "CMD", "mongosh", "--eval", "db.adminCommand('ping')" ]
      interval: 10s
      timeout: 30s
      retries: 10
      start_period: 60s

  shard1-master:
    image: mongo:latest
    container_name: shard1-master
    restart: always
    ports:
      - "27018:27018"
    networks:
      app-network:
        ipv4_address: 173.17.0.20
    volumes:
      - shard1-master-data:/data/db
    command: [
      "--shardsvr",
      "--replSet", "shard1",
      "--bind_ip_all",
      "--port", "27018"
    ]
    healthcheck:
      test: [ "CMD", "mongosh", "--port", "27018", "--eval", "db.adminCommand('ping')" ]
      interval: 10s
      timeout: 30s
      retries: 10
      start_period: 60s

  shard1-slave1:
    image: mongo:latest
    container_name: shard1-slave1
    restart: always
    ports:
      - "27028:27018"
    networks:
      app-network:
        ipv4_address: 173.17.0.21
    volumes:
      - shard1-slave1-data:/data/db
    command: [
      "--shardsvr",
      "--replSet", "shard1",
      "--bind_ip_all",
      "--port", "27018"
    ]
    healthcheck:
      test: [ "CMD", "mongosh", "--port", "27018", "--eval", "db.adminCommand('ping')" ]
      interval: 10s
      timeout: 30s
      retries: 10
      start_period: 60s

  shard1-slave2:
    image: mongo:latest
    container_name: shard1-slave2
    restart: always
    ports:
      - "27038:27018"
    networks:
      app-network:
        ipv4_address: 173.17.0.22
    volumes:
      - shard1-slave2-data:/data/db
    command: [
      "--shardsvr",
      "--replSet", "shard1",
      "--bind_ip_all",
      "--port", "27018"
    ]
    healthcheck:
      test: [ "CMD", "mongosh", "--port", "27018", "--eval", "db.adminCommand('ping')" ]
      interval: 10s
      timeout: 30s
      retries: 10
      start_period: 60s

  shard2-master:
    image: mongo:latest
    container_name: shard2-master
    restart: always
    ports:
      - "27019:27019"
    networks:
      app-network:
        ipv4_address: 173.17.0.30
    volumes:
      - shard2-master-data:/data/db
    command: [
      "--shardsvr",
      "--replSet", "shard2",
      "--bind_ip_all",
      "--port", "27019"
    ]
    healthcheck:
      test: [ "CMD", "mongosh", "--port", "27019", "--eval", "db.adminCommand('ping')" ]
      interval: 10s
      timeout: 30s
      retries: 10
      start_period: 60s

  shard2-slave1:
    image: mongo:latest
    container_name: shard2-slave1
    restart: always
    ports:
      - "27029:27019"
    networks:
      app-network:
        ipv4_address: 173.17.0.31
    volumes:
      - shard2-slave1-data:/data/db
    command: [
      "--shardsvr",
      "--replSet", "shard2",
      "--bind_ip_all",
      "--port", "27019"
    ]
    healthcheck:
      test: [ "CMD", "mongosh", "--port", "27019", "--eval", "db.adminCommand('ping')" ]
      interval: 10s
      timeout: 30s
      retries: 10
      start_period: 60s

  shard2-slave2:
    image: mongo:latest
    container_name: shard2-slave2
    restart: always
    ports:
      - "27039:27019"
    networks:
      app-network:
        ipv4_address: 173.17.0.32
    volumes:
      - shard2-slave2-data:/data/db
    command: [
      "--shardsvr",
      "--replSet", "shard2",
      "--bind_ip_all",
      "--port", "27019"
    ]
    healthcheck:
      test: [ "CMD", "mongosh", "--port", "27019", "--eval", "db.adminCommand('ping')" ]
      interval: 10s
      timeout: 30s
      retries: 10
      start_period: 60s

  mongos_router:
    image: mongo:latest
    container_name: mongos_router
    restart: unless-stopped
    ports:
      - "27020:27020"
    networks:
      app-network:
        ipv4_address: 173.17.0.40
    depends_on:
      configSrv:
        condition: service_healthy
      shard1-master:
        condition: service_healthy
      shard2-master:
        condition: service_healthy
    command: [
      "mongos",
      "--configdb", "config_server/configSrv:27017",
      "--bind_ip_all",
      "--port", "27020"
    ]
    healthcheck:
      test: [ "CMD", "mongosh", "--port", "27020", "--eval", "db.adminCommand('ping')" ]
      interval: 10s
      timeout: 30s
      retries: 15
      start_period: 90s

  mongodb1:
    container_name: mongodb1
    image: mongo:latest
    networks:
      app-network:
        ipv4_address: 173.17.0.50
    volumes:
      - mongodb1_data_container:/data/db
    ports:
      - "27021:27017"
    command:
      [
        "--replSet",
        "rs0",
        "--bind_ip_all",
        "--port",
        "27017"
      ]
    healthcheck:
      test: [ "CMD", "mongosh", "--eval", "db.adminCommand('ping')" ]
      interval: 10s
      timeout: 30s
      retries: 10
      start_period: 60s

  pymongo_api:
    container_name: pymongo_api
    build:
      context: api_app
      dockerfile: Dockerfile
    depends_on:
      mongos_router:
        condition: service_healthy
      mongodb1:
        condition: service_healthy
    ports:
      - "8080:8080"
    networks:
      app-network:
        ipv4_address: 173.17.0.60
    environment:
      MONGODB_URL: "mongodb://mongos_router:27020,mongodb1:27017"
      MONGODB_DATABASE_NAME: "somedb"
      MONGODB_REPLICA_SET: "config_server"

networks:
  app-network:
    driver: bridge
    ipam:
      config:
        - subnet: 173.17.0.0/16

volumes:
  mongodb1_data_container:
    driver: local
  config-data:
    driver: local
  shard1-master-data:
    driver: local
  shard1-slave1-data:
    driver: local
  shard1-slave2-data:
    driver: local
  shard2-master-data:
    driver: local
  shard2-slave1-data:
    driver: local
  shard2-slave2-data:
    driver: local